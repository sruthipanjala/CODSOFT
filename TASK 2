import math

class TicTacToe:
    def __init__(self):
        self.board = [' ' for _ in range(9)]
        self.current_winner = None

    def print_board(self):
        for row in [self.board[i*3:(i+1)*3] for i in range(3)]:
            print('| ' + ' | '.join(row) + ' |')
    def print_board_nums():
        number_board = [[str(i) for i in range(j*3, (j+1)*3)] for j in range(3)]
        for row in number_board:
            print('| ' + ' | '.join(row) + ' |')

    def available_moves(self):
        return [i for i, spot in enumerate(self.board) if spot == ' ']

    def empty_squares(self):
        return ' ' in self.board

    def num_empty_squares(self):
        return self.board.count(' ')

    def make_move(self, square, letter):
        if self.board[square] == ' ':
            self.board[square] = letter
            if self.winner(square, letter):
                self.current_winner = letter
            return True
        return False

    def winner(self, square, letter):
        row_ind = square // 3
        row = self.board[row_ind*3:(row_ind+1)*3]
        if all([spot == letter for spot in row]):
            return True
        col_ind = square % 3
        column = [self.board[col_ind+i*3] for i in range(3)]
        if all([spot == letter for spot in column]):
            return True
        if square % 2 == 0:
            diagonal1 = [self.board[i] for i in [0, 4, 8]]
            if all([spot == letter for spot in diagonal1]):
                return True
            diagonal2 = [self.board[i] for i in [2, 4, 6]]
            if all([spot == letter for spot in diagonal2]):
                return True
        return False

def minimax(game, maximizing_player, alpha, beta):
    if game.current_winner:
        if game.current_winner == 'X':
            return -1, None
        else:
            return 1, None
    elif not game.empty_squares():
        return 0, None
    if maximizing_player:
        value = -math.inf
        move = None
        for possible_move in game.available_moves():
            game.make_move(possible_move, 'O')
            score, _ = minimax(game, False, alpha, beta)
            game.board[possible_move] = ' '
            if score > value:
                value = score
                move = possible_move
            alpha = max(alpha, value)
            if alpha >= beta:
                break
        return value, move
    else:
        value = math.inf
        move = None
        for possible_move in game.available_moves():
            game.make_move(possible_move, 'X')
            score, _ = minimax(game, True, alpha, beta)
            game.board[possible_move] = ' '
            if score < value:
                value = score
                move = possible_move
            beta = min(beta, value)
            if beta <= alpha:
                break
        return value, move

def play():
    game = TicTacToe()
    print("Welcome to Tic-Tac-Toe!")
    print("Here's how the board looks like:")
    TicTacToe.print_board_nums()
    print("Start the game!")
    while game.empty_squares():
        if game.num_empty_squares() % 2 == 1:
            square = None
            while square not in game.available_moves():
                try:
                    square = int(input("Make your move (0-8): "))
                except ValueError:
                    print("Invalid input. Please enter a number between 0 and 8.")
            game.make_move(square, 'X')
            if game.winner(square, 'X'):
                print("You won!")
                return
        else:
            _, square = minimax(game, True, -math.inf, math.inf)
            game.make_move(square, 'O')
            if game.winner(square, 'O'):
                print("AI won!")
                return
        game.print_board()
    print("It's a tie!")

play()
